{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\andre\\\\Desktop\\\\exerc\\xEDcios-web\\\\react\\\\crud\\\\frontend\\\\src\\\\components\\\\user\\\\UserCrud.jsx\";\nimport React, { Component } from \"react\";\nimport Main from \"../template/Main\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst headerProps = {\n  icon: 'users',\n  title: 'Usuários',\n  subtitle: 'Cadastro de Usuários: Incluir, Listar, Alterar e Excluir!'\n};\nconst baseUrl = 'http://localhost:3001/users';\nconst initialState = {\n  user: {\n    name: '',\n    email: ''\n  },\n  list: []\n};\nexport default class UserCrud extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      ...initialState\n    };\n  }\n  clear() {\n    this.setState({\n      user: initialState.user\n    });\n  }\n  save() {\n    const user = this.state.user;\n    const method = user.id ? 'put' : 'post'; // put: altera o usuário, post: incluir um usuário\n    const url = user.id ? `${baseUrl}/${user.id}` : baseUrl;\n    axios[method](url, user).then(resp => {\n      const list = this.getUpdatedList(resp.data); // função que atualiza a lista\n      this.setState({\n        user: initialState.user,\n        list\n      }); // limpa e traz a nova lista atualizada\n    });\n  }\n\n  getUpdatedList(user) {\n    const list = this.state.list.filter(u => u.id !== user.id); // gerando uma nova lista (usando o filter) usand com o usuário atualizado\n    list.unshift(user); // adiciona em primeiro lugar na lista\n  }\n\n  updateField(event) {\n    // função para atualizar o email e o nome \n    const user = {\n      ...this.state.user\n    }; // clonando o objeto\n    user[event.target.name] = event.target.value;\n    this.setState({\n      user\n    });\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(Main, {\n      ...headerProps,\n      children: \"Cadastro de Usu\\xE1rio\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this);\n  }\n}","map":{"version":3,"names":["React","Component","Main","axios","headerProps","icon","title","subtitle","baseUrl","initialState","user","name","email","list","UserCrud","state","clear","setState","save","method","id","url","then","resp","getUpdatedList","data","filter","u","unshift","updateField","event","target","value","render"],"sources":["C:/Users/andre/Desktop/exercícios-web/react/crud/frontend/src/components/user/UserCrud.jsx"],"sourcesContent":["import React, { Component } from \"react\"\r\nimport Main from \"../template/Main\"\r\nimport axios from \"axios\"\r\n\r\nconst headerProps = {\r\n    icon: 'users',\r\n    title: 'Usuários',\r\n    subtitle: 'Cadastro de Usuários: Incluir, Listar, Alterar e Excluir!'\r\n}\r\n\r\nconst baseUrl = 'http://localhost:3001/users'\r\nconst initialState = {\r\n    user: { name: '', email: '' },\r\n    list: []\r\n}\r\n\r\nexport default class UserCrud extends Component {\r\n\r\n    state = { ...initialState }\r\n\r\n    clear() {\r\n        this.setState({ user: initialState.user })\r\n\r\n    }\r\n\r\n    save() {\r\n        const user = this.state.user\r\n        const method = user.id ? 'put' : 'post' // put: altera o usuário, post: incluir um usuário\r\n        const url = user.id ? `${baseUrl}/${user.id}` : baseUrl\r\n        axios[method](url, user)\r\n            .then(resp => {\r\n                const list = this.getUpdatedList(resp.data) // função que atualiza a lista\r\n                this.setState({ user: initialState.user, list }) // limpa e traz a nova lista atualizada\r\n            })\r\n    }\r\n\r\n    getUpdatedList(user) {\r\n        const list = this.state.list.filter(u => u.id !== user.id) // gerando uma nova lista (usando o filter) usand com o usuário atualizado\r\n        list.unshift(user) // adiciona em primeiro lugar na lista\r\n    }\r\n\r\n    updateField(event) { // função para atualizar o email e o nome \r\n        const user = { ...this.state.user } // clonando o objeto\r\n        user[event.target.name] = event.target.value\r\n        this.setState({ user })\r\n    }\r\n\r\n    \r\n\r\n\r\n    render() {\r\n        return (\r\n            <Main {...headerProps}>\r\n                Cadastro de Usuário\r\n            </Main>\r\n        )\r\n    }\r\n}"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAOC,IAAI,MAAM,kBAAkB;AACnC,OAAOC,KAAK,MAAM,OAAO;AAAA;AAEzB,MAAMC,WAAW,GAAG;EAChBC,IAAI,EAAE,OAAO;EACbC,KAAK,EAAE,UAAU;EACjBC,QAAQ,EAAE;AACd,CAAC;AAED,MAAMC,OAAO,GAAG,6BAA6B;AAC7C,MAAMC,YAAY,GAAG;EACjBC,IAAI,EAAE;IAAEC,IAAI,EAAE,EAAE;IAAEC,KAAK,EAAE;EAAG,CAAC;EAC7BC,IAAI,EAAE;AACV,CAAC;AAED,eAAe,MAAMC,QAAQ,SAASb,SAAS,CAAC;EAAA;IAAA;IAAA,KAE5Cc,KAAK,GAAG;MAAE,GAAGN;IAAa,CAAC;EAAA;EAE3BO,KAAK,GAAG;IACJ,IAAI,CAACC,QAAQ,CAAC;MAAEP,IAAI,EAAED,YAAY,CAACC;IAAK,CAAC,CAAC;EAE9C;EAEAQ,IAAI,GAAG;IACH,MAAMR,IAAI,GAAG,IAAI,CAACK,KAAK,CAACL,IAAI;IAC5B,MAAMS,MAAM,GAAGT,IAAI,CAACU,EAAE,GAAG,KAAK,GAAG,MAAM,EAAC;IACxC,MAAMC,GAAG,GAAGX,IAAI,CAACU,EAAE,GAAI,GAAEZ,OAAQ,IAAGE,IAAI,CAACU,EAAG,EAAC,GAAGZ,OAAO;IACvDL,KAAK,CAACgB,MAAM,CAAC,CAACE,GAAG,EAAEX,IAAI,CAAC,CACnBY,IAAI,CAACC,IAAI,IAAI;MACV,MAAMV,IAAI,GAAG,IAAI,CAACW,cAAc,CAACD,IAAI,CAACE,IAAI,CAAC,EAAC;MAC5C,IAAI,CAACR,QAAQ,CAAC;QAAEP,IAAI,EAAED,YAAY,CAACC,IAAI;QAAEG;MAAK,CAAC,CAAC,EAAC;IACrD,CAAC,CAAC;EACV;;EAEAW,cAAc,CAACd,IAAI,EAAE;IACjB,MAAMG,IAAI,GAAG,IAAI,CAACE,KAAK,CAACF,IAAI,CAACa,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACP,EAAE,KAAKV,IAAI,CAACU,EAAE,CAAC,EAAC;IAC3DP,IAAI,CAACe,OAAO,CAAClB,IAAI,CAAC,EAAC;EACvB;;EAEAmB,WAAW,CAACC,KAAK,EAAE;IAAE;IACjB,MAAMpB,IAAI,GAAG;MAAE,GAAG,IAAI,CAACK,KAAK,CAACL;IAAK,CAAC,EAAC;IACpCA,IAAI,CAACoB,KAAK,CAACC,MAAM,CAACpB,IAAI,CAAC,GAAGmB,KAAK,CAACC,MAAM,CAACC,KAAK;IAC5C,IAAI,CAACf,QAAQ,CAAC;MAAEP;IAAK,CAAC,CAAC;EAC3B;EAKAuB,MAAM,GAAG;IACL,oBACI,QAAC,IAAI;MAAA,GAAK7B,WAAW;MAAA,UAAE;IAEvB;MAAA;MAAA;MAAA;IAAA,QAAO;EAEf;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}